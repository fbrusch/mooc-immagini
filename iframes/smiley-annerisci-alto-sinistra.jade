html
    head
        link(href='https://fonts.googleapis.com/css?family=Open+Sans',rel='stylesheet',type='text/css')
        script(src="https://cdn.rawgit.com/mozilla/jschannel/master/src/jschannel.js")
        link(rel="stylesheet",href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css")
        link(rel="stylesheet",href="app.css")
        
        //-style
            //-:less
                //-body {
                    //-font-family: "Open Sans";
                //-}
                //-#console > {font-size:20px}
    body
        div
            #image(style="display:inline-block")
            //#values(style="display:inline-block")
        #console(style="margin:10px")
        #exsCheck
        script(src="ExsCheck.js")
        script(src="app.js")
        script
            :coffeescript
                {LastCommandDisplay, Console2, Matrix, FontAwesome, $, React, Image, Console, SS, _e, imgsData} = window.images

                outcome = false 
                cns = $("#console")[0]
                img = $("#image")[0]
                exsCheck = $("#exsCheck")[0]
                values = $("#values")[0]

                rows = imgsData["smiley"]


                ss = new SS(rows)

                ss.on "error", (e) -> console.log e

                tests =  
                    [
                        {
                            display: "Il pixel in alto a sinistra deve essere nero"
                            success: """GRANDE! Hai scritto ed eseguito
                                        correttamente le tue prime righe di
                                        codice!! Nunc est bibendum! Ora
                                        premi "CHECK" per registrare il
                                        risultato..."""
                            test: -> 
                                outcome = ss.state.rows[0][0] is 0
                        }
                    ]
                ExsCheck = require 'ExsCheck'


                render = =>
                    React.render (_e Image, 
                            handleClick: (coords) -> 
                            selectedPixel: ss.state.selectedPixel
                            rows: ss.state.rows )
                        , img
                    React.render (_e ExsCheck, 
                                tests: tests
                        ), exsCheck 

                    React.render (_e Console2, 
                        buttons:
                            "Esegui": -> ss.exec ss.state.command
                            "Reset": ss.resetRows
                        lastCommand: ss.state.lastCommand
                        error: ss.state.error
                        onEnter: (x) -> 
                            ss.exec ss.state.command
                        onShiftEnter: (x) -> 
                            ss.exec ss.state.command
                        onMap: (x) ->
                            ss.map x
                        onChange: (e) -> ss.state.command = e.target.value 
                        textStore: ss
                        text: ss.state.command 
                    ), cns

                ss.on "change", -> 
                    render()
                render()

                window.getGrade = -> outcome
                window.setState = -> 
                    stateStr = if arguments.length is 1 then arguments[0] else arguments[1];
                    ss.deserializeState stateStr
                window.getState = ss.serializeState
                
            
        script(src="iframe_check.js")
