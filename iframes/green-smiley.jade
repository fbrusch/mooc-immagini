html
    head
        meta(charset="UTF8")
        link(rel="stylesheet", href="app.css")
        style
            :less
                #console {width:50%}
                #console > {width:50%; font-size:20px}
                body {
                    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
                    color: rgb(76, 76, 76);
                }
                .input {
                    width: 4em;
                    }
                .question {
                    margin:5px;
                    }
                .check {
                    display: inline-block;
                    }
                .questions {
                    margin-top: 10px;
                    }
                #console-display {
                    border: 2px dotted black;
                    height: 3em;
                    width:50%;
                    padding:10px;
                    background-color: lightgrey;
                    font-family: monospace;

                    }
                
        link(rel="stylesheet",href="font-awesome/css/font-awesome.min.css")
        script(src="lodash.js")
        script(src="jquery.js")
        script(src="node-event-emitter.js")
        script(src="ExsCheck.js")
        script(src="ConsoleDisplay.js")
        script(src="app.js")
    body
        div
            #image(style="display:inline-block")
        #console(style="font-size:20px")
        #console-display
        h3 Obiettivi
        div.questions
            ul
                li
                    div.question
                        span Tutti i pixel devono avere la componente verde al massimo (255)
                        .check#check-verde-basso-destra

        #exsCheck
        script

            :coffeescript
                _ = require('lodash')
                $ = require('jquery')
                ExsCheck = require 'ExsCheck'

                {Matrix, Image, Console, SS, _e, Console2, imgsData} = window.images

                a = 0

                cns = $("#console")[0]
                consoleDisplay = $("#console-display")[0]
                img = $("#image")[0]
                exsCheck = $("#exsCheck")[0]

                randomColor = -> Math.round(Math.random()*255) for i in [0,1,2]
                rows = ((randomColor().map((x) -> if imgsData["smiley"][j-1][i-1] is 0 then x else 255) for i in [1..8]) for j in [1..8])
                rows_original = 
                #//-rows = ((randomColor().map((x) -> x) for i in [1..8]) for j in [1..8])
                #//-rows = _.cloneDeep(imgsData["smiley"])
                
                ss = new SS(rows)
                ss.state.lines = []

                ss.on "error", (e) -> alert e

                ConsoleDisplay = React.createClass
                    render: ->
                        {div, p} = React.DOM
                        div null,
                            @props.lines.map (x, i) ->
                                p {key: i}, x

                checkRosso = $("#check-rosso-alto-sinistra")
                checkVerde = $("#check-verde-basso-destra")

                $("input#rosso-alto-sinistra").on "input", -> render()
                $("input#verde-basso-destra").on "input", -> render()

                # i pixel di ss.state.rows devono avere la componente 
                # verde al massimo e le altre uguali allo smiley

                test = -> 
                    for y in rows
                        for x in y
                            if x[1] isnt 255 then return false
                    return true

                String(ss.state.rows[0][0][0]) is $("#rosso-alto-sinistra").val()

                check = React.createClass
                    render: ->
                        {i} = React.DOM
                        if @props.value
                            i 
                                className: "fa fa-check"
                                style: {color:"green"}
                        else
                            i
                                className: "fa fa-times"
                                style: {color: "red"}
                            null


                render = =>

                    React.render (_e Image, 
                            handleClick: (coords) -> 
                                ss.invertPixel coords[0], coords[1] 
                            selectedPixel: ss.state.selectedPixel
                            rows: ss.state.rows )
                        , img

                    React.render (_e ConsoleDisplay, 
                            lines: ss.state.lines)
                        , consoleDisplay

                    #/-React.render (_e ExsCheck, 
                    #           //-tests: tests
                    #   //-), exsCheck 
                    

                    React.render (_e check, {value: test()}), checkVerde[0]



                React.render (_e Console2, 
                    buttons:
                        "Esegui su tutti": ->
                            res = ss.map ss.state.command
                    onEnter: (x) -> 
                        ss.exec ss.state.command
                    onShiftEnter: (x) -> 
                        ss.exec ss.state.command
                    onMap: (x) ->
                        ss.map x
                    onChange: (e) -> 
                        ss.state.command = e.target.value 
                ), cns

                ss.on "error", (e) -> console.log e

                ss.on "change", -> 
                    render()

                render()
