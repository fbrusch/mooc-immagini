html
    head
        meta(charset="UTF8")
        link(rel="stylesheet", href="app.css")
        script(src="https://cdn.rawgit.com/mozilla/jschannel/master/src/jschannel.js")
        style
            :less
                #console {width:100%}
                body {
                    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
                    color: rgb(76, 76, 76);
                }
                .input {
                    width: 4em;
                    }
                .question {
                    margin:5px;
                    }
                .check {
                    display: inline-block;
                    }
                .questions {
                    margin-top: 10px;
                    }
                #console-display {
                    border: 2px dotted black;
                    height: 3em;
                    width:50%;
                    padding:10px;
                    background-color: lightgrey;
                    font-family: monospace;

                    }
                
        link(rel="stylesheet",href="font-awesome/css/font-awesome.min.css")
        script(src="lodash.js")
        script(src="jquery.js")
        script(src="node-event-emitter.js")
        script(src="ExsCheck.js")
        script(src="app.js")
    body
        div
            #image(style="display:inline-block")
        #console
        #console-display
        h3 Obiettivo
        div.questions
            ul
                li
                    div.question
                        span Tutti i pixel dello smiley devono essere neri
                        .check#tutti-neri
        
        #exsCheck

        #help.modal
            .close.fa.fa-close
            h2 Aiuti 
            ol
                li.hint
                    p.q.
                      Cosa differenzia,
                      in termini di componenti di colore, i pixel bianchi da
                      quelli dello smiley? I pixel bianchi hanno componenti
                      <b>[255,255,255]</b>, mentre gli altri <b>[0,x,0]</b>,
                      con <b>x</b> che varia. Qual Ã¨ una "<b>condizione</b>"
                      che sia vera sicuramente per tutti i pixel dello
                      smiley, e non per quelli dello sfondo?)</p>
        script

            :coffeescript
                _ = require('lodash')
                $ = require('jquery')
                ExsCheck = require 'ExsCheck'

                {Matrix, Image, Console, modal, hintize, SS, _e, Console2, imgsData} = window.images

                hintize()


                a = 0

                cns = $("#console")[0]
                consoleDisplay = $("#console-display")[0]
                img = $("#image")[0]
                exsCheck = $("#exsCheck")[0]

                randomGreen = -> [0,Math.round(Math.random()*255),0] 
                rows = ((randomGreen().map((x) -> if imgsData["smiley"][j-1][i-1] is 0 then x else 255) for i in [1..8]) for j in [1..8])
                rows_original = _.cloneDeep rows 
                
                ss = new SS(rows)
                ss.state.lines = []

                ss.on "error", (e) -> alert e

                ConsoleDisplay = React.createClass
                    render: ->
                        {div, p} = React.DOM
                        div null,
                            @props.lines.map (x, i) ->
                                p {key: i}, x


                # i pixel di ss.state.rows devono essere neri dove ci sono i
                # i pixel dello smiley 

                test = -> 
                    for y in [0..(ss.state.rows.length)-1]
                        for x in [0..(ss.state.rows[0].length)-1]
                            console.log x, y, rows[y][x], imgsData["smiley"][y][x]
                            if imgsData["smiley"][y][x] is 0
                                if not _.eq ss.state.rows[y][x], [0,0,0] then return false
                    return true

                check = React.createClass
                    render: ->
                        {i} = React.DOM
                        if @props.value
                            i 
                                className: "fa fa-check"
                                style: {color:"green"}
                        else
                            i
                                className: "fa fa-times"
                                style: {color: "red"}
                            null

                outcome = false
                window.getGrade = -> outcome
                window.getState = ss.serializeState
                window.setState = -> 
                    stateStr = if arguments.length is 1 then arguments[0] else arguments[1];
                    ss.deserializeState stateStr

                render = =>

                    React.render (_e Image, 
                            handleClick: (coords) -> 
                                ss.invertPixel coords[0], coords[1] 
                            selectedPixel: ss.state.selectedPixel
                            rows: ss.state.rows )
                        , img

                    React.render (_e ConsoleDisplay, 
                            lines: ss.state.lines)
                        , consoleDisplay

                    React.render (_e check, {value: test()}), $(".check#tutti-neri")[0]
                    outcome = test()

                    React.render (_e Console2, 
                        error: ss.state.error
                        lastCommand: ss.state.lastCommand
                        buttons:
                            "Esegui": ->
                                res = ss.exec ss.state.command
                                if res
                                    ss.state.lines = [JSON.stringify(res)]
                                ss.commitState()
                            "Esegui su tutti": ->
                                res = ss.map ss.state.command
                            "Reset": ->
                                ss.state.rows = _.cloneDeep rows_original
                                ss.commitState()
                            "Suggerimenti": modal($("#help")).show
                                
                                

                        onEnter: (x) -> 
                            res = ss.map ss.state.command
                        onShiftEnter: (x) -> 
                            res = ss.exec ss.state.command
                            if res
                                ss.state.lines = [JSON.stringify(res)]
                            ss.commitState()
                        onChange: (e) -> 
                            ss.state.command = e.target.value 
                    ), cns

                ss.on "error", (e) -> console.log e

                ss.on "change", -> 
                    render()

                render()

        
        script(src="iframe_check.js")
