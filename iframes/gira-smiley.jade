html
    head
        meta(charset="UTF8")
        link(rel="stylesheet", href="app.css")
        link(href='https://fonts.googleapis.com/css?family=Open+Sans',rel='stylesheet',type='text/css')
        style
            :less
                body {
                    font-family: "Open Sans";
                }
                #console > {font-size:20px}
        script(src="https://cdn.rawgit.com/mozilla/jschannel/master/src/jschannel.js")
        script(src="lodash.js")
        script(src="jquery.js")
        script(src="node-event-emitter.js")
        script(src="ExsCheck.js")
        script(src="iframe_check.js")
        script(src="app.js")
    body
        //-your-image(data-data="smiley",data-console="true")
        div
            #image(style="display:inline-block")
            //#values(style="display:inline-block")
        #console(style="margin:10px;font-size:20px")
        #exsCheck
        script
            :coffeescript
                _ = require('lodash')
                $ = require('jquery')
                ExsCheck = require 'ExsCheck'
                EventEmitter = require 'node-event-emitter'
                {Matrix, Image, Console, SS, _e, imgsData} = window.images
                window.metronome = new EventEmitter()
                a = 0
                setInterval (-> window.metronome.emit "tick", a++), 1000

                cns = $("#console")[0]
                img = $("#image")[0]
                exsCheck = $("#exsCheck")[0]

                # Here goes the verification stuff, try it, and then we move it
                # to a parent layout

                #channel = undefined

                #outcome = false

                #window.getState =  -> JSON.stringify {} 
                #window.getGrade = -> JSON.stringify outcome

                #if window.parent isnt window
                #    channel = Channel.build
                #        window: window.parent
                #        origin: "*"
                #        scope: "JSInput"

                #    channel.bind "getGrade",  window.getGrade 
                #    channel.bind "getState",  window.getState 

                outcome = false
                window.getGrade = -> outcome


                rows = _.cloneDeep(imgsData["smiley"])

                ss = new SS(rows)

                tests =  
                    [
                        {
                            display: "Fai in modo che lo smiley sorrida verso destra.."
                            success: _("Bravissimo!!".split(''))
                                .reverse().value().join('') + 
                                " Ora premi CHECK per registrare il tuo successo!"
                           
                            test: -> 
                                cols = rows[0].length
                                for r, y in imgsData["smiley"]
                                    for v, x  in r
                                        console.log v, ss.state.rows[y][x]
                                        if v isnt ss.state.rows[y][cols-x-1] then return false 
                                return true
                        }
                    ]

                render = =>
                    React.render (_e Image, 
                            handleClick: (coords) -> 
                                ss.invertPixel coords[0], coords[1] 
                            selectedPixel: ss.state.selectedPixel
                            rows: ss.state.rows )
                        , img
                    React.render (_e ExsCheck, 
                                tests: tests
                                setOutcome: (x) ->
                                    window.outcome = x
                        ), exsCheck 



                ss.on "error", (e) -> console.log e

                ss.on "change", -> 
                    render()

                render()
