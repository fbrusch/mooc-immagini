html
  head
        script(src="vendor-lib.js")
        script(src="https://cdn.rawgit.com/mozilla/jschannel/master/src/jschannel.js")
        link(rel="stylesheet", href="app.css")
        style.
            //-body {
                //-#font-family: "Helvetica";
                //-color: rgb(76, 76,76);
                //-font-size: 16px;
                //-}
            input.color {
                height:2em;
                margin-right:10px;
                padding:2px;
                border: none;
                border-bottom: 1px solid black;
                text-align: center;
                outline: 0;
                width:4em;
                font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial,
                sans-serif;
                font-size: 1em;

                }

            button {
                border:1px solid black;
                padding:11px;
                background:none;
                transition: all 0.4s;
                }

            button:hover {
                background: rgb(200,200,200);
                }

            .color-message {
                margin: 10px;   
                display:inline-block;
                }

  body
    script
        :coffeescript
            outcome = false
            window.getGrade = -> JSON.stringify outcome
            React = require 'react' 
            window.$ = $ = require 'jquery'
            _ = require 'lodash'
            Reflux = require 'reflux'

            _c = React.createClass
            _e = React.createElement

            setColorComponents = Reflux.createAction()
            resetGuessColor = Reflux.createAction()

            randInt = (min, max) -> Math.floor (min + Math.random()*(max-min))

            guessesCountStore = Reflux.createStore

                set: (data) ->
                    _.assign @data, data
                    @trigger @data
                init: ->
                    @data = {guesses: 0}
                    @listenTo setColorComponents, => 
                        @data.guesses += 1
                        @trigger @data
                    @listenTo resetGuessColor, =>
                        @data.guesses = 0
                        @trigger @data

            colorStore = Reflux.createStore

                serializeState: -> JSON.stringify @data
                
                deserializeState: (str) -> 
                    try
                        _.assign @data, JSON.parse str
                        @data.guesses = @data.guesses or 0
                        guessesCountStore.set {guesses: @data.guesses}
                        @trigger @data
                        console.log "succesfully rehydrated state"
                    catch


                setGuessColorRandom: ->
                    luminance = randInt 0,255
                    @data.colors.guess = 
                        r: luminance
                        g: luminance
                        b: luminance
                    @trigger @data

                updateGuess: (r, g, b) ->
                    @data.colors.test = {r, g, b}
                    @trigger @data

                init: -> 
                    @data = 
                        colors:
                            guess: {r:10, b:10, g:200}
                            red: {r:255, b:0, g:0}
                            blue: {r:0, b:255, g:0}
                            green: {r:0, b:0, g:255}
                            test: {r:undefined , b:undefined, g:undefined}

                    @setGuessColorRandom()

                    @listenTo setColorComponents, @updateGuess.bind(this)

                    @listenTo resetGuessColor, 
                        @setGuessColorRandom.bind(this)

                    @listenTo guessesCountStore, (data) =>
                        @data.guesses = data.guesses

            #window.getState = -> colorStore.serializeState()

            outcomeStore = Reflux.createStore
                init: ->
                    @data = {success: undefined}
                    @listenTo colorStore, ({colors}) ->
                        test = _.transform colors.test, (res, n, k) -> 
                            res[k] = Number n
                        @data.success = _.isEqual test, colors.guess
                        console.log colors
                        @trigger @data

            outcomeStore.listen ({success}) ->
                outcome = success
                if success
                       $("#successo").css("visibility","visible") 
                else
                       $("#successo").css "visibility", "hidden"


            window.getState = 
                colorStore.serializeState 
            window.setState = -> 
                stateStr = if arguments.length is 1 then arguments[0] else arguments[1];
                colorStore.deserializeState stateStr

            GuessesCount = _c
                getInitialState: ->
                    guesses: undefined 
                componentDidMount: ->
                    guessesCountStore.listen ({guesses}) =>
                        @setState {guesses}
                render: ->
                    _e "span", {}, @state.guesses

            guessesCountStore.listen ({guesses})->
                if guesses > 25
                    $("#attenzione").css("visibility","visible")

                    
            Message = _c
                render: ->
                    colorComponent =
                        colorStore.data.colors.test[@props.colorComponent]
                    guessComponent =
                        colorStore.data.colors.guess[@props.colorComponent]
                    distance = guessComponent - colorComponent
                    maxDistance = colorStore.data.maxDistance
                    quanto = if distance < 0 then "chiaro" else "scuro"
                    message = if distance and distance isnt 0 
                                "troppo #{quanto}"
                              else 
                                    ""
                    _e "p", 
                        className: "color-message", message

            Pixel = _c
                render: ->
                    if @props.colorName
                        colorStruct = colorStore.data.colors[@props.colorName]
                        color = "rgb(#{colorStruct.r},#{colorStruct.g},#{colorStruct.b})"
                    else
                        color = "#aabbcc"
                    _e "div", 
                        style:
                            _.assign
                                height: @props.dim 
                                width: @props.dim
                                backgroundColor: color
                            , {border: "1px solid black"} 
                

            renderTag = (tag, reactClass) ->
                for p in $(tag)
                    props = _.transform p.attributes, (res, attr) ->
                        res[_.camelCase attr.name] = attr.value
                    React.render (_e reactClass, props), p 

            render = -> 
                renderTag "pixel", Pixel
                renderTag "message", Message

            $(document).ready -> 

                $("#prova").click -> 
                    grey = Number $("input#grey")[0].value
                    red   = grey
                    green = grey
                    blue  = grey
                    setColorComponents grey, grey, grey 

                $("#cambia-colore").click -> 
                    resetGuessColor()
                render()
                renderTag "guesses-count", GuessesCount
            colorStore.listen render

    p.
    p
      pixel(color-name="guess", dim='100px')
    p
      button#cambia-colore Cambia grigio 
    p.
      Indovina il livello di grigio (0: nero, 255: bianco):
      fai in modo che i <i>pixel</i> sotto diventino dello stesso colore.
    p(style='clear: both')
      br
      span Livello di grigio:
      input.color#grey(type='text')
      |  
      |  
    p(style='clear: both; margin-top:10px')
      button#prova Prova 
      |  e guarda che colore hai creato!
    p(style='display:flex; flex-direction:row')
      pixel(color-name="guess", dim='100px')
      |   
      pixel(style='margin-left: 20px', color-name='test', dim='100px')
      message(color-name="red", color-component="r")
    span Tentativi: 
    span 
        guesses-count
   
    div#attenzione(style="visibility:hidden")  
        span  Attenzione! Hai gi&agrave; sbagliato 
        guesses-count
        span &nbsp; volte! sei un po&apos; distratto!
    p#successo(style="visibility:hidden")  Bravo! Hai indovinato il colore! Ora premi "Check" per registrare il tuo successo!
    script(src="iframe_check.js")
